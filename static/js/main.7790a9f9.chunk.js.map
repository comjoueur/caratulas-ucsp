{"version":3,"sources":["api.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["url","process","includes","defaultData","career","value","label","course","work","gender","names","semester","year","useStyles","makeStyles","theme","html","backgroundColor","palette","background","default","root","marginTop","spacing","form","paddingTop","paddingBottom","textContainer","width","App","classes","useState","setUrl","data","setData","generateCover","console","log","options","method","body","JSON","stringify","headers","fetch","then","res","json","link","fetchGenerateCover","Object","keys","reduce","prev","key","convertToDataApi","pdfUrl","handleTextInput","event","target","name","Container","maxWidth","className","Paper","Grid","container","direction","alignItems","component","noValidate","autoComplete","item","Typography","variant","map","field","TextField","defaultValue","onChange","fullWidth","Button","color","onClick","href","Boolean","window","location","hostname","match","createMuiTheme","common","blue","orange","primary","main","secondary","typography","tab","fontFamily","textTransform","fontWeight","fontSize","estimate","h2","lineHeight","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7790a9f9.chunk.js","sourcesContent":["const url = process.env.NODE_ENV.includes('development') ? 'http://localhost:4000/' : 'https://caratulas-ucsp-api.herokuapp.com/';\n\nexport const fetchGenerateCover = (data) => {\n  console.log(data);\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers:{\n      'Content-Type': 'application/json'\n    }\n  };\n\n  return fetch(url, options)\n    .then(res=> res.json())\n    .then(res => res.link)\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fetchGenerateCover } from \"./api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst debug = false;\n\nconst defaultData = {\n  career: {\n    value: debug ? \"Ciencias de la computacion\" : \"\",\n    label: \"Carrera\"\n  },\n  course: {\n    value: debug ? \"Microprocessors\" : \"\",\n    label: \"Curso\"\n  },\n  work: {\n    value: debug ? \"Real final job\" : \"\",\n    label: \"Nombre del trabajo\"\n  },\n  gender: {\n    value: debug ? \"M\" : \"\",\n    label: \"Género\"\n  },\n  names: {\n    value: debug ? [\"Oscar Daniel Ramos Ramirez\"] : [\"\"],\n    label: \"Integrantes\"\n  },\n  semester: {\n    value: debug ? \"VIII Semester\" : \"\",\n    label: \"Semestre\"\n  },\n  year: {\n    value: debug ? \"1999\" : \"\",\n    label: \"Año\"\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  \"@global\": {\n    html: {\n      backgroundColor: theme.palette.background.default\n    }\n  },\n  root: {\n    marginTop: theme.spacing(8)\n  },\n  form: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2)\n  },\n  textContainer: {\n    width: \"80%\"\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [url, setUrl] = useState(\"Aquí aparecerá un link\");\n  const [data, setData] = useState(defaultData);\n\n  const generateCover = () => {\n    const convertToDataApi = data =>\n      Object.keys(data).reduce((prev, key) => {\n        prev[key] = data[key].value;\n        return prev;\n      }, {});\n\n    fetchGenerateCover(convertToDataApi(data)).then(pdfUrl => {\n      setUrl(pdfUrl);\n    });\n  };\n\n  const handleTextInput = event => {\n    setData({ ...data, [event.target.name]: event.target.value });\n  };\n\n  return (\n    <Container maxWidth=\"xs\" className={classes.root}>\n      <Paper>\n        <Grid\n          container\n          spacing={1}\n          direction=\"column\"\n          alignItems=\"center\"\n          className={classes.form}\n          component=\"form\"\n          noValidate\n          autoComplete=\"off\"\n        >\n          <Grid item>\n            <Typography variant=\"h5\">Carátulas UCSP</Typography>\n          </Grid>\n          {Object.keys(data).map(field => (\n            <Grid item key={field} className={classes.textContainer}>\n              <TextField\n                key={field}\n                name={field}\n                label={data[field].label}\n                defaultValue={data[field].value}\n                onChange={handleTextInput}\n                fullWidth\n              />\n            </Grid>\n          ))}\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => generateCover()}\n            >\n              Generar Caratula\n            </Button>\n          </Grid>\n          <Grid item>\n            <a href={url}>{url}</a>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst arcBlue = \"#1A5BA0\";\nconst arcOrange = \"#FFBA60\";\nconst background = \"#dfdbd9\";\n\nconst theme = createMuiTheme({\n  palette: {\n    common: {\n      blue: arcBlue,\n      orange: arcOrange\n    },\n    primary: {\n      main: arcBlue\n    },\n    secondary: {\n      main: arcOrange\n    },\n    background: {\n      default: background\n    }\n  },\n  typography: {\n    tab: {\n      fontFamily: \"Raleway\",\n      textTransform: \"none\",\n      fontWeight: '700',\n      fontSize: \"1rem\",\n    },\n    estimate: {\n      fontFamily: \"Pacifico\",\n      fontSize: \"1rem\",\n      textTransform: \"none\",\n      color: \"white\"\n    },\n    h2: {\n      fontFamily: 'Raleway',\n      fontWeight: 700,\n      fontSize: '2.5em',\n      color: `${arcBlue}`,\n      lineHeight: 1.5\n    }\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}