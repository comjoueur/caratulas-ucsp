{"version":3,"sources":["api.js","App.js","serviceWorker.js","index.js"],"names":["url","process","includes","defaultData","useStyles","makeStyles","theme","root","margin","spacing","width","textField","display","App","useState","setUrl","career","setCareer","course","setCourse","work","setWork","gender","setGender","names","setNames","semester","setSemester","year","setYear","classes","generateCover","data","options","method","body","JSON","stringify","headers","fetch","then","res","json","link","fetchGenerateCover","pdfUrl","setInput","value","name","className","noValidate","autoComplete","TextField","label","defaultValue","onChange","event","target","Button","variant","color","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bec831c4.chunk.js","sourcesContent":["const url = process.env.NODE_ENV.includes('development') ? 'http://localhost:4000/' : 'https://caratulas-ucsp-api.herokuapp.com/';\r\n\r\nexport const fetchGenerateCover = (data) => {\r\n  const options = {\r\n    method: 'POST',\r\n    body: JSON.stringify(data),\r\n    headers:{\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  return fetch(url, options)\r\n    .then(res=> res.json())\r\n    .then(res => res.link)\r\n}\r\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { fetchGenerateCover } from './api';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\n\nconst defaultData = {\n  career: 'Computer Science',\n  course: 'Microprocessors',\n  work: 'Real final job',\n  gender: 'M',\n  names: ['Oscar Daniel Ramos Ramirez'],\n  semester: 'VIII Semester',\n  year: '1999',\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  textField: {\n    display: \"block\"\n  }\n}));\n\nfunction App() {\n  const [url, setUrl] = useState('');\n  const [career, setCareer] = useState(defaultData.career);\n  const [course, setCourse] = useState(defaultData.course);\n  const [work, setWork] = useState(defaultData.work);\n  const [gender, setGender] = useState(defaultData.gender);\n  const [names, setNames] = useState(defaultData.names);\n  const [semester, setSemester] = useState(defaultData.semester);\n  const [year, setYear] = useState(defaultData.year);\n  const classes = useStyles();\n\n  const generateCover = () => {\n    const data = { career, course, work, gender, names, semester, year }\n\n    fetchGenerateCover(data)\n      .then(pdfUrl => {\n        setUrl(pdfUrl);\n      })\n  }\n\n  const setInput = (value, name) => {\n    switch (name) {\n      case 'career':\n        setCareer(value);\n        break;\n      case 'course':\n        setCourse(value);\n        break;\n      case 'work':\n        setWork(value);\n        break;\n      case 'gender':\n        setGender(value);\n        break;\n      case 'names':\n        setNames(value);\n        break;\n      case 'semester':\n        setSemester(value);\n        break;\n      case 'year':\n        setYear(value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div>\n      <form className={classes.root} noValidate autoComplete='off'>\n        <TextField className={classes.textField} label='career' defaultValue={career}\n                   onChange={(event) => setInput(event.target.value, 'career')} />\n        <TextField className={classes.textField} label='course' defaultValue={course}\n                   onChange={(event) => setInput(event.target.value, 'course')} />\n        <TextField className={classes.textField} label='work' defaultValue={work}\n                   onChange={(event) => setInput(event.target.value, 'work')} />\n        <TextField className={classes.textField} label='gender' defaultValue={gender}\n                   onChange={(event) => setInput(event.target.value, 'gender')} />\n        <TextField className={classes.textField} label='name' defaultValue={names[0]}\n                   onChange={(event) => setInput(event.target.value, 'names')} />\n        <TextField className={classes.textField} label='semester' defaultValue={semester}\n                   onChange={(event) => setInput(event.target.value, 'semester')} />\n        <TextField className={classes.textField} label='year' defaultValue={year}\n                   onChange={(event) => setInput(event.target.value, 'year')} />\n\n        <Button variant='contained' color='primary'\n                onClick={() => generateCover()}>\n          Send\n        </Button>\n      </form>\n      Link a pdf=<a href={url}>{url}</a>\n    </div>\n  )\n    ;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}