{"version":3,"sources":["api.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["url","process","includes","defaultData","career","value","label","course","work","semester","year","gender","radio","names","useStyles","makeStyles","theme","html","backgroundColor","palette","background","default","root","marginTop","spacing","form","paddingTop","paddingBottom","textContainer","width","radioContainer","TextFieldView","classes","data","handleTextInput","name","Grid","item","className","TextField","variant","onChange","fullWidth","RadiosView","field","handleRadioChange","FormControl","component","key","FormLabel","RadioGroup","row","aria-label","Object","keys","map","FormControlLabel","control","Radio","color","App","useState","setUrl","setData","generateCover","console","log","options","method","body","JSON","stringify","headers","fetch","then","res","json","link","fetchGenerateCover","reduce","prev","convertToDataApi","pdfUrl","event","target","Container","maxWidth","Paper","container","direction","alignItems","noValidate","autoComplete","Typography","Fragment","Button","onClick","href","Boolean","window","location","hostname","match","createMuiTheme","common","blue","orange","primary","main","secondary","typography","tab","fontFamily","textTransform","fontWeight","fontSize","estimate","h2","lineHeight","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed7c8ff2.chunk.js","sourcesContent":["const url = process.env.NODE_ENV.includes('development') ? 'http://localhost:4000/' : 'https://caratulas-ucsp-api.herokuapp.com/';\n\nexport const fetchGenerateCover = (data) => {\n  console.log(data);\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers:{\n      'Content-Type': 'application/json'\n    }\n  };\n\n  return fetch(url, options)\n    .then(res=> res.json())\n    .then(res => res.link)\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fetchGenerateCover } from \"./api\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst debug = false;\n\nconst defaultData = {\n  career: {\n    value: debug ? \"Ciencias de la computacion\" : \"\",\n    label: \"Carrera\"\n  },\n  course: {\n    value: debug ? \"Microprocessors\" : \"\",\n    label: \"Curso\"\n  },\n  work: {\n    value: debug ? \"Real final job\" : \"\",\n    label: \"Nombre del trabajo\"\n  },\n  semester: {\n    value: debug ? \"VIII Semester\" : \"\",\n    label: \"Semestre\"\n  },\n  year: {\n    value: debug ? \"1999\" : \"\",\n    label: \"Año\"\n  },\n  gender: {\n    value: debug ? \"M\" : \"M\",\n    radio: { \"M\": \"Masculino\", \"F\": \"Femenino\" },\n    label: \"Género\"\n  },\n  names: {\n    value: debug ? [\"Oscar Daniel Ramos Ramirez\"] : [\"\"],\n    label: \"Integrantes\"\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  \"@global\": {\n    html: {\n      backgroundColor: theme.palette.background.default\n    }\n  },\n  root: {\n    marginTop: theme.spacing(8)\n  },\n  form: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2)\n  },\n  textContainer: {\n    width: \"80%\"\n  },\n  radioContainer: {\n    width: \"78%\"\n  }\n}));\n\nconst TextFieldView = ({ classes, data, handleTextInput, name }) =>\n  <Grid item className={classes.textContainer}>\n    <TextField\n      variant='outlined'\n      name={name}\n      value={data[name].value}\n      label={data[name].label}\n      onChange={handleTextInput}\n      fullWidth\n    />\n  </Grid>;\n\nconst RadiosView = ({ classes, data, field, handleRadioChange }) => (\n  <FormControl component='fieldset' key={field} className={classes.radioContainer}>\n    <FormLabel component='legend'>{data[field].label}</FormLabel>\n    <RadioGroup row aria-label={data[field].label} value={data[field].value} onChange={handleRadioChange}>\n      {\n        Object.keys(data[field].radio).map(key => (\n          <FormControlLabel\n            key={key}\n            name={field}\n            value={key}\n            control={\n              <Radio color='primary' />\n            }\n            label={data[field].radio[key]}\n          />\n        ))\n      }\n    </RadioGroup>\n  </FormControl>\n)\n\nfunction App() {\n  const classes = useStyles();\n  const [url, setUrl] = useState(\"Aquí aparecerá un link\");\n  const [data, setData] = useState(defaultData);\n\n  const generateCover = () => {\n    const convertToDataApi = data =>\n      Object.keys(data).reduce((prev, key) => {\n        prev[key] = data[key].value;\n        return prev;\n      }, {});\n\n    fetchGenerateCover(convertToDataApi(data)).then(pdfUrl => {\n      setUrl(pdfUrl);\n    });\n  };\n\n  const handleTextInput = event => {\n    const field = event.target.name;\n    const value = event.target.value;\n    setData({ ...data, [field]: { ...data[field], value } });\n  };\n\n  const handleRadioChange = event => {\n    const field = event.target.name;\n    const value = event.target.value;\n    setData({ ...data, [field]: { ...data[field], value } })\n  };\n\n  return (\n    <Container maxWidth='xs' className={classes.root}>\n      <Paper>\n        <Grid\n          container\n          spacing={1}\n          direction='column'\n          alignItems='center'\n          className={classes.form}\n          component='form'\n          noValidate\n          autoComplete='off'\n        >\n          <Grid item>\n            <Typography variant='h5'>Carátulas UCSP</Typography>\n          </Grid>\n          {Object.keys(data).map(field =>\n            (\n              <React.Fragment key={field}>\n                {\n                  data[field].radio ?\n                    <RadiosView key={field} classes={classes} field={field} data={data} handleRadioChange={handleRadioChange} />\n                    :\n                    <TextFieldView key={field} classes={classes} name={field} data={data} handleTextInput={handleTextInput} />\n                }\n              </React.Fragment>\n            )\n          )}\n          <Grid item>\n            <Button variant='contained' color='primary' onClick={() => generateCover()}>\n              Generar Caratula\n            </Button>\n          </Grid>\n          <Grid item>\n            <a href={url}>{url}</a>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst arcBlue = \"#1A5BA0\";\nconst arcOrange = \"#FFBA60\";\nconst background = \"#dfdbd9\";\n\nconst theme = createMuiTheme({\n  palette: {\n    common: {\n      blue: arcBlue,\n      orange: arcOrange\n    },\n    primary: {\n      main: arcBlue\n    },\n    secondary: {\n      main: arcOrange\n    },\n    background: {\n      default: background\n    }\n  },\n  typography: {\n    tab: {\n      fontFamily: \"Raleway\",\n      textTransform: \"none\",\n      fontWeight: '700',\n      fontSize: \"1rem\",\n    },\n    estimate: {\n      fontFamily: \"Pacifico\",\n      fontSize: \"1rem\",\n      textTransform: \"none\",\n      color: \"white\"\n    },\n    h2: {\n      fontFamily: 'Raleway',\n      fontWeight: 700,\n      fontSize: '2.5em',\n      color: `${arcBlue}`,\n      lineHeight: 1.5\n    }\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}